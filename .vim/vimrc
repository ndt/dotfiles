"" vim:ts=4:sts=4:sw=4
"" vim:fdm=expr:fdl=0
"" vim:fde=getline(v\:lnum)=~'^""'?'>'.(matchend(getline(v\:lnum),'""*')-2)\:'='

"""""""""""
" Plugins "
"""""""""""

"" download vim-plug if missing
if empty(glob("~/.vim/autoload/plug.vim"))
	silent! execute '!curl --create-dirs -fsSLo ~/.vim/autoload/plug.vim https://raw.github.com/junegunn/vim-plug/master/plug.vim'
	autocmd VimEnter * silent! PlugInstall
endif

"" load Plugins
" Specify a directory for plugins (for Neovim: ~/.local/share/nvim/plugged)
call plug#begin()
Plug 'tpope/vim-sensible'
Plug 'tpope/vim-eunuch'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-speeddating'
Plug 'junegunn/vim-easy-align'
Plug 'matze/vim-move'

Plug 'majutsushi/tagbar'
Plug 'mbbill/undotree'

Plug 'ryanoasis/vim-devicons'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'lifepillar/vim-solarized8'

Plug 'mattn/calendar-vim'
Plug 'vimwiki/vimwiki'

Plug 'pearofducks/ansible-vim'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }

"Plug 'takac/vim-hardtime'
call plug#end()


""""""""""""""""
"  Appearance  "
""""""""""""""""
set encoding=UTF-8

"" left editor edge
set number
set relativenumber
set foldcolumn=3
set numberwidth=5
set nowrap

"" bottom editor edge
set noshowmode     " disble for plugin vim-airline

"" content area
set cursorline
set scrolloff=3

"" Tab settings
set tabstop=4
set shiftwidth=4
set softtabstop=4

"" set list
if has('multi_byte') && &encoding ==# 'utf-8'
	let &listchars = 'eol:␤,tab:› ,trail:·,precedes:…,extends:…'
else
	let &listchars = 'tab:> ,extends:>,precedes:<,nbsp:.'
endif

set autoindent
set showcmd
set hidden
set wildmenu
set wildmode=list:longest

set laststatus=2
set undofile

let mapleader=","
imap jj <Esc>

"" Searching
nnoremap / /\v
vnoremap / /\v
set ignorecase
set smartcase
set gdefault
set incsearch
set showmatch
set hlsearch
nnoremap <leader><space> :noh<cr>
nnoremap <tab> %
vnoremap <tab> %

"" wrapping long lines
set wrap
set textwidth=79
set formatoptions=qrn1

" autosave on tab change {{{
"autocmd FocusLost * wa
" }}}

"" If buffer modified, update any 'Last modified: ' in the first 20 lines.
" 'Last modified: ' can have up to 10 characters before (they are retained).
" Restores cursor and window position using save_cursor variable.
function! LastModified()
	if &modified
		let save_cursor = getpos(".")
		let n = min([20, line("$")])
		keepjumps exe '1,' . n . 's#^\(.\{,10}:Datum:    \).*#\1' .
					\ strftime('%Y-%m-%d %H:%M') . '#e'
	call histdel('search', -1)
		call setpos('.', save_cursor)
	endif
endfun
autocmd BufWritePre * call LastModified()

"" Backup Settings
set backup                  " Backups are nice
if has('persistent_undo')
	set undofile                " So is persistent undo
	set undolevels=1000         " Maximum number of changes that can be undone
	set undoreload=10000        " Maximum number of lines to save for undo on a buffer reload
endif


for dir in [$HOME."/.cache/vim/undo//", $HOME."/.cache/vim/backup//", $HOME."/.cache/vim/swap//"]
	if !isdirectory(dir)
		call mkdir(dir, "p")
	endif
endfor

set undodir=~/.cache/vim/undo//,/tmp
set backupdir=~/.cache/vim/backup//,/tmp
set directory=~/.cache/vim/swap//,/tmp


" Calendar
let g:calendar_number_of_month = 6
let g:calendar_options = 'fdc=0 nonu nornu'


"" vimwiki
let wiki_1 = {}
let wiki_1.path = '~/vimwiki/'
let wiki_1.auto_tags = 1
let wiki_1.maxhi = 1
let wiki_1.auto_diary_index = 1

let wiki_2 = {}
let wiki_2.path = '~/project_docs/'
let wiki_2.index = 'main'

let g:vimwiki_list = [wiki_1, wiki_2]
let g:vimwiki_list = [{'path': '~/vimwiki/', 'auto_tags': 1, 'maxhi': 1, 'auto_diary_index': 1}]
let g:vimwiki_folding = 'list'
let g:vimwiki_hl_headers = 1
let g:tagbar_type_vimwiki = {
			\   'ctagstype':'vimwiki'
			\ , 'kinds':['h:header']
			\ , 'sro':'&&&'
			\ , 'kind2scope':{'h':'header'}
			\ , 'sort':0
			\ , 'ctagsbin':'~/vimwiki/vwtags.py'
			\ , 'ctagsargs': 'default'
			\ }

autocmd FileType vimwiki setlocal ts=4 sts=4 sw=4 noexpandtab
au BufRead,BufNewFile *.wiki set filetype=vimwiki
" :autocmd FileType vimwiki map d :VimwikiMakeDiaryNote
function! ToggleCalendar()
	execute ":Calendar"
	if exists("g:calendar_open")
		if g:calendar_open == 1
			execute "q"
			unlet g:calendar_open
		else
			g:calendar_open = 1
		end
	else
		let g:calendar_open = 1
	end
endfunction
" :autocmd FileType vimwiki map c :call ToggleCalendar()

nnoremap <leader>t<leader>d :-1read $HOME/vimwiki/templates/diary.tmpl.wiki<C-R>




"" Plugin Hard mode
nnoremap <leader>h <Esc>:call HardTimeToggle()<CR>

"" Plugin matze/vim-move
let g:move_key_modifier = 'C'

"" Plugin tagbar
nmap <F8> :TagbarToggle<CR>

"
" -----------------------------------------------------------------------
"

"
" abbreviations
"
iab <expr> #d strftime('%F')



"" WSL yank support
let s:clip = '/mnt/c/Windows/System32/clip.exe'  " default location
if executable(s:clip)
	augroup WSLYank
		autocmd!
		autocmd TextYankPost * call system('echo '.shellescape(join(v:event.regcontents, "\<CR>")).' | '.s:clip)
	augroup END
end






""""""""""""""""""""""""
"  THIS IS A CATEGORY  "
""""""""""""""""""""""""
"" Autofolding .vimrc
" see http://vimcasts.org/episodes/writing-a-custom-fold-expression/
""" defines a foldlevel for each line of code
function! VimFolds(lnum)
	let s:thisline = getline(a:lnum)
	if match(s:thisline, '^"" ') >= 0
		return '>2'
	endif
	if match(s:thisline, '^""" ') >= 0
		return '>3'
	endif
	let s:two_following_lines = 0
	if line(a:lnum) + 2 <= line('$')
		let s:line_1_after = getline(a:lnum+1)
		let s:line_2_after = getline(a:lnum+2)
		let s:two_following_lines = 1
	endif
	if !s:two_following_lines
		return '='
	endif
else
	if (match(s:thisline, '^"""""') >= 0) &&
				\ (match(s:line_1_after, '^"  ') >= 0) &&
				\ (match(s:line_2_after, '^""""') >= 0)
		return '>1'
	else
		return '='
	endif
endif
endfunction

""" defines a foldtext
function! VimFoldText()
	" handle special case of normal comment first
	let s:info = '('.string(v:foldend-v:foldstart).' l)'
	if v:foldlevel == 1
		let s:line = ' ◇ '.getline(v:foldstart+1)[3:-2]
	elseif v:foldlevel == 2
		let s:line = '   ●  '.getline(v:foldstart)[3:]
	elseif v:foldlevel == 3
		let s:line = '     ▪ '.getline(v:foldstart)[4:]
	endif
	if strwidth(s:line) > 80 - len(s:info) - 3
		return s:line[:79-len(s:info)-3+len(s:line)-strwidth(s:line)].'...'.s:info
	else
		return s:line.repeat(' ', 80 - strwidth(s:line) - len(s:info)).s:info
	endif
endfunction

""" set foldsettings automatically for vim files
augroup fold_vimrc
	autocmd!
	autocmd FileType vim
				\ setlocal foldmethod=expr |
				\ setlocal foldexpr=VimFolds(v:lnum) |
				\ setlocal foldtext=VimFoldText() |
	"              \ set foldcolumn=2 foldminlines=2
augroup END


""""""""""""""""
"  Appearance  "
""""""""""""""""
"" Color Scheme
set termguicolors
set background=dark
let g:airline_solarized_bg='dark'
colorscheme solarized8
let g:airline_theme='solarized'

"highlight clear Normal
highlight Normal guibg=NONE ctermbg=NONE
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 1


" NERDtree like config for Netrw
let g:netrw_banner = 0
let g:netrw_liststyle = 3
let g:netrw_browse_split = 4
let g:netrw_winsize = 25
let g:netrw_altv = 1
"augroup ProjectDrawer
"	autocmd!
"	autocmd VimEnter * :Vexplore
"augroup END

